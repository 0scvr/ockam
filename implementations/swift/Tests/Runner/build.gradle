
plugins {
  id 'network.ockam.gradle.host' version '1.0.0'
  id 'network.ockam.gradle.builders' version '1.0.0'
}

task cloneAppleCodeSignRepo {
  description = 'Clone .apple-codesign repo'

  onlyIf { host.macosBuilder.enabled && !file('.apple-codesign').exists() }
  doLast {
    exec {
      commandLine 'git', 'clone', 'git@github.com:ockam-network/apple-codesign.git', '.apple-codesign'
    }
  }
}

task build {
  dependsOn cloneAppleCodeSignRepo
  onlyIf { host.macosBuilder.enabled }
  doLast {
    builderExec 'macos', {
      script """
security create-keychain -p vagrant Vagrant.keychain
security list-keychains -d user -s Vagrant.keychain

security import \
  /vagrant/implementations/swift/Tests/Runner/.apple-codesign/certificates/${host.macosBuilder.appleCodesign.certName} \
  -k Vagrant.keychain \
  -P "${host.macosBuilder.appleCodesign.certPassword}" \
  -T "/usr/bin/codesign"
security set-key-partition-list -S apple-tool:,apple: -s -k vagrant Vagrant.keychain
security set-keychain-settings Vagrant.keychain
security unlock-keychain -p vagrant Vagrant.keychain
security find-identity -v -p codesigning Vagrant.keychain

mkdir -p "/Users/vagrant/Library/MobileDevice/Provisioning Profiles/"
cp /vagrant/implementations/swift/Tests/Runner/.apple-codesign/profiles/${host.macosBuilder.appleCodesign.profileName} \
  "/Users/vagrant/Library/MobileDevice/Provisioning Profiles/"

rm -rf Runner.xcodeproj
xcodegen generate

rm -rf .build
xcodebuild build-for-testing -project Runner.xcodeproj \
  -scheme Runner -derivedDataPath .build/ios -destination 'generic/platform=iOS'

xcodebuild build-for-testing -project Runner.xcodeproj \
  -scheme Runner -derivedDataPath .build/ios-simulator -destination 'generic/platform=iOS Simulator'
"""
    }
  }
}

task test {
  dependsOn build
  onlyIf { file('.build').exists() }
}

host.testInventory.each { item ->
  if(item.type == "iOS Simulator") {
    test.doLast {
      exec {
        commandLine 'xcodebuild', 'test-without-building',
          '-xctestrun', '.build/ios-simulator/Build/Products/Runner_iphonesimulator13.0-x86_64.xctestrun',
          '-destination', "platform=iOS Simulator,id=${item.id}"
      }
    }
  }

  if(item.type == "iOS") {
    test.doLast {
      exec {
        commandLine 'xcodebuild', 'test-without-building',
          '-xctestrun', '.build/ios/Build/Products/Runner_iphoneos13.0-arm64e.xctestrun',
          '-destination', "platform=iOS,id=${item.id}"
      }
    }
  }
}

build.mustRunAfter(cloneAppleCodeSignRepo)
test.mustRunAfter(build)

task clean {
  doLast {
    delete '.build'
    delete 'Runner.xcodeproj'
  }
}
