
// override the build directory
buildDir = '.env'

// read the host project property
ext.host = project.hasProperty('host') ? host : 'host'

// read the target project property
ext.target = project.hasProperty('target') ? target : 'host'

// capture the number of processors available to the jvm
ext.availableProcessors = Runtime.getRuntime().availableProcessors();

// detect if the gradle is running on windows
ext.isWindows = {
  def familyWindows = org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS
  return org.apache.tools.ant.taskdefs.condition.Os.isFamily(familyWindows)
}()

// adapt c cammand for windows
def adapt(command) {
  def adapted = ['cmd', '/c']
  if(isWindows) {
    adapted.addAll(command)
  } else {
    adapted = command
  }
  return adapted
}

task build {
  description 'Build the project.'
  group project.name

  def generator = project.hasProperty('generator') ? generator : 'Unix Makefiles'

  def mode = project.hasProperty('mode') ? mode : 'test'
  def buildType = (mode == 'release') ? 'Release' : 'Debug'
  def buildTestsing = (mode == 'test') ? 'ON' : 'OFF'

  def targetDir = java.nio.file.Paths.get(buildDir.toString(), host, generator, target, buildType)

  def otherCmakeOptions = project.hasProperty('cmakeOptions') ? cmakeOptions : ''

  // make sure the rust code is built before the actions in this task run.
  // dependsOn gradle.includedBuild('rust').task(':build')

  // create the cmake binary directory
  doLast { mkdir targetDir }

  // generate the project build files
  doLast {
    exec {
      commandLine adapt(['cmake'] <<
        '--parallel' << availableProcessors <<
        '-S' << '.' <<
        '-B' << targetDir <<
        "-DBUILD_TESTING=${buildTestsing}" <<
        "-DCMAKE_BUILD_TYPE=${buildType}" <<
        '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON' <<
        '-G' << generator <<
        otherCmakeOptions
      )
    }
  }

  doLast {
    exec {
      def command = ['cmake'] << '--build' << targetDir

      if(generator == 'Unix Makefiles') {
        command << '--' << "-j${availableProcessors}"
      }

      commandLine adapt(command)
    }
  }
}

task test {
  description 'Test the project.'
  group project.name

  def generator = project.hasProperty('generator') ? generator : 'Unix Makefiles'
  def mode = 'test'
  def buildType = 'Debug'

  def targetDir = java.nio.file.Paths.get(buildDir.toString(), host, generator, target, buildType)

  doLast {
    exec {
      workingDir targetDir
      commandLine adapt(["ctest"] << "-V")
    }
  }
}

task clean {
  doLast { delete buildDir }
}
